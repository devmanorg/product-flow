use: product

benefit:
  - Сокращает стоимость и сроки разработки
    - уменьшает количество итераций
  - Экономит время заказчика при общении с командой
  - Снижает коммуникационную нагрузку внутри команды
      - как часть требований к UX-дизайнеру
      - как часть требований к программистам

referencies:
  - [Шаблон сценария использования](https://sharkdevelop.com/wp-content/uploads/2019/11/1_4-6zxgd6oP8MS9p7WTI_fQ.jpeg)

competitors:
  - Живое обсуждение с заказчиком
  - Краткое описание продукта в свободной форме
  - Скриншот похожего продукта
  - Ограничиться однострочной пользовательской историей (user stories)
  - Функциональные и нефункциональные требования в ТЗ по ГОСТ
  - [Приёмочные тесты "Acceptance testing"](https://en.wikipedia.org/wiki/Acceptance_testing)
  - [Нотация сценариев использования UML](https://ru.wikipedia.org/wiki/%D0%A1%D1%86%D0%B5%D0%BD%D0%B0%D1%80%D0%B8%D0%B9_%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F#%D0%9D%D0%BE%D1%82%D0%B0%D1%86%D0%B8%D1%8F_%D1%81%D1%86%D0%B5%D0%BD%D0%B0%D1%80%D0%B8%D0%B5%D0%B2_%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
  - …

user_stories:
  - PM хочет выяснить насколько ценен сценарий
    - сравнивает с пользой от проекта, чтобы проверить брать его в разработку, отложить или совсем выкинут.
    - сравнивает сценарий с доступными альтернативами, чтобы выкинуть его из планов
    - зависят ли другие важные сценарии от этого?
  - PM хочет показать требования заказчику, чтобы получить от него обратную связь и уточнить требования
  - PM хочет выяснить какие другие сценарии блокируют начало работ по этому ?
  - PM хочет обосновать ценность фичи или зависимого продукта через ссылку на сценарий

# limitations:
#   - …


how_to_check:
  - Правильное название сценария
    - в формате глагол-существительное. Например, "Заимствовать Книги", "Забрать наличные деньги"
    - записано в настоящем времени, а не в форме should
  - Заполнены все разделы [шаблона](./template.md)
  - Цельность
      - сценарий начинается снаружи системы и заканчивается там же
      - польза от сценария лежит снаружи
  - Не содержит деталей реализации
      - не что "видит", а что "узнал"
      - нет ничего про страницы сайта, виджеты и прочий UI
  - В виде коротких списков, специально подготовленно для быстро сканирования при чтении
  - Для каджого варианта сбоя есть своя отдельная история

risks:
  - Непонятное название. Два соседних сценария не отличить друг от друга по заголовку
  - Слабый текст. Тяжело читать → сценарий никто не читает
  - Избыточность. Много текста → быстрое устаревание и дорогая поддержка
  - Непонятные обозначения. Заказчик не сможет отревьюить и сказать что не так
  - Бесполезный сценарий. С тем же успехом действующее лицо решит проблему самостоятельно в обход новой системы
  - Невозможно проверить. Для действующего лица проблема остаётся нерешённой
  - Польза описана поверхностно → потенциально бесполезный сценарий
  - Выбраны не те термины
    - не из предментной области
    - термины перепутаны
  - Сценарием не будут пользоваться, потому что другие пути решения проблемы проще
  - Сценарий охватывает сразу много сеансов взаимодействия, разнесённых по времени
    - за это время много чего успевает произойти, меняется ситуация и мотивы
    - могут перемешиваться сеансы сразу нескольких сценариев
  - Слишком мелкие сценарии использования, каждый из которых не имеет ценность только в привязке к более общей цели
  - В случае сбоя системы не будет предусмотрен план Б и пользователь так и не решит свою проблему → злость и фрустрация

how_to_estimate:
  - 5-15 минут на сценарий для понятного продукта

