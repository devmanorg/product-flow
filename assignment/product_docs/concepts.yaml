Продукт: !concept
  определение: |
    Синонимы: Инструмент.
  Кодовая база сайта: !example |
    Кодовую базу сайта можно рассматривать как отдельный продукт. Пользуются им программисты, сис.админы, product-менеджеры и конечные пользователи.
  Веб-сервис: !example |
    Как продукт можно рассматривать веб-сервис целиком, включающий не только кодовую базу, но ещё сервера,
    маркетинг, контент, комьюнити в Telegram и пр.
  Отчёт о расследовании инцидента: !example |
    Как продукт можно рассматривать результат расследования причин сбоя в работе ПО. Это может быть отчёт по
    стандартной форме, включающий описание причин, как воспроизвести проблему, каков ущерб и что стоит предпринять.
  Отчёт о проведённом тестировании ПО: !example |
    Как продукт можно рассматривать результат проведённого тестирования ПО. Это может быть список протестированных
    историй, набор критических багов и отложенных issues.
  Подразделение компании: !example |
    Как продукт можно рассматривать подразделение компании целиком вместе с инструментами, орг.структурой,
    штатным расписанием и людьми. Бизнес-юнит является продуктом с точки зрения начальства, внешних и
    внутренних заказчиков. Продукт включает в себя и тех людей, что сейчас работают в этом подразделении.


Польза: !concept
  определение: |
    Польза - это работа, на которую Пользователь "нанимает продукт". Польза по сути является Job Statement
    из фреймворка JTBD (см. ссылку в `referencies`). У пользователя есть задача, которую надо выполнить,
    и он ищет лучший продукт, инструмент, который поможет ему в этом.

    Синонимы: Желание, Хотелка, Проблема, Потребность
  Разные уровни пользы: !example |
    Уровни пользы: Поскольку Польза - это прежде всего ответ на вопрос "Зачем нужен продукт?",
    то вопрос этот можно задать многократно, перейдя от желания выполнить конкретное действия до эмоции или базовой
    потребности человека. Пример:

    ```
    --Пользователь 1--
    Хочу писать чистый код --> Зачем?
      Чтобы код выглядел профессионально --> Зачем?
        Чтобы показать свой код на собеседовании --> Зачем?
          Чтобы устроиться на работу программистом --> Зачем?
            Чтобы потом переехать из РФ  --> Зачем?
              Чтобы не бояться, что попаду в армию, если объявят общую мобилизацию в РФ
    ```

    Если польза написана на уровне эмоций, то количество продуктов, которые ее могут обеспечить крайне велико
    и валерьянка будет конкурентом за выполнение работы "не бояться". При этом размер той аудитории, что выберет
    ваш продукт может оказаться невелико — продукт проиграет конкурентам.

    ```
    --Пользователь 2--
    Хочу писать чистый код --> Зачем?
      Чтобы код выглядел профессионально --> Зачем?
        Чтобы показать свой код на собеседовании --> Зачем?
          Чтобы устроиться на работу программистом --> Зачем?
            Чтобы зарабатывать много денег -->
              Чтобы чувствовать себя "крутым" 
    ```

    До третьего уровня пользы у разных пользователей совпадали, а значит мы можем сделать продукт для обоих пользователей,
    выделив пользу именно на уровне выполнения работы "устроиться на работу" и при этом предложить ему не только
    навык чистого кода, но и другие инструменты, которые помогут достичь желаемого.

    Навык написания чистого кода без более глубокой мотивации "устроиться на работу"" при этом не имеет ценности сам по
    себе. Поэтому описание пользы на столь высоком уровне приведет к раздуванию бюджета и добавлению малоэффективных
    историй. А значит снизит качество продукта, ведь важного результата пользователь не достигнет и продуктом
    пользоваться не станет.

    Задача выбора уровня пользы лежит на product manager и от выбранного решения зависит выживание продукта.
    Ищите золотую середину.

  # TODO Возможна ли польза без непосредственного взаимодействия с продуктом или исключена?
    # Заказчик разработки продукта может не пользоваться продуктом напрямую, но разве он не хочет получить прибыль
    # от продажи продукта? А может, Исполнителю нужен крутой продукт для прокачки личного бренда, а не просто
    # вознаграждение за проект? Пользу могут получать разные Роли и их интересы не менее важны, чем интересы конечного
    # Пользователя. Например, задача получения прибыли добавит в продукт платную подписку, наличие которой никак
    # не вытекает из пользы для Пользователя.


Ситуация: !concept
  определение: |
    Описание обстоятельств, при которых у Пользователя возникает проблема или потребность. Отвечает на вопросы
    "Где?", "Когда?", "При каких обстоятельствах?". Сам по себе продукт не имеет ценности, но приобретает её, когда
    мы используем его в подходящей ситуации.
  На бегу: !example |
    Проблемы возникают у пользователя в определенных ситуациях: место, время, внешние условия, взаимодействие с другими людьми. Добавьте контекст в пользу верхнего уровня, чтобы обозначить в каких ситуациях пользователю понадобится продукт. Например, если продуктом будут пользоваться "на бегу", то нет смысла делать MVP для десктопа.
  Описание персоны: !exclusion |
    В UX дизайне есть такое понятие, как "Персона". Она состоит из многих элементов - имя, место работы и
    должность, демографические характеристики, технический бэкграунд, высказывание, фотографии/картинки персоны.
    Цель персон — создать эмпатию у команды, особенно у тех, кто не общается с пользователями. Во фреймворках
    JTBD и Product Flow фокус с персональных характеристик смещается на мотивацию и описание ситуации. Мать троих
    детей, живущая в Америке, выкладывает фотографии в социальную сеть по тем же причинам и в похожих ситуациях, что
    и корейский подросток.

    Ситуация -- это не описание персоны.


Точка старта: !concept
  определение: |
    Место, откуда пользователь начинает своё взаимодействие с продуктом.


Роль: !concept


Граница продукта: !concept
  определение: |
    Англоязычный синоним: Boundary.

    Два уровня пользы в задании:
    О границах продукта нужно помнить во время проектирования и разработки, чтобы не терять "курс". Границы продукта точно будут на лендинге продукта самым крупным шрифтом. Именно за счет них Пользователь готов попробовать новый продукт.


История: !concept
  определение: |
    История (Job story) — это быстрый способ документировать требования клиента, без необходимости разрабатывать
    обширные формализованные документы и впоследствии тратить ресурсы на их поддержание.

    ## История vs Алгоритм действий

    Пользовательский интерфейс сайта, чат-бота и подобных IT-систем по природе своей асинхронен и нелинейнен.
    Даже чат-бот, несмотря на свою нелинейность, всегда позволяет вернуться на предыдущий шаг или в главное меню,
    чтобы начать с начала. Действия пользователя имеет смысл рассматривать как итеративный нелинейный процесс.
    На самом деле, большую часть реального полного "алгоритма действий пользователя" составляет не основной поток,
    а альтернативные потоки, которые позволяют задавать ветвления потока, циклы и обрабатывать «неправильные» события.

    Корень проблемы здесь в концепциях "алгоритма действий", "бизнес-процесса", "сценария использования". Мы
    описываем работу системы человек-машина как детерминированный последовательный процесс. Но на деле всё, что
    легко свести к линейному процессу так же легко поддаётся полной автоматизации. Люди остаются лишь в тех
    бизнес-процессах, где важна нелинейность. Поэтому описывать взаимодействие человека с машиной как линейный процесс
    нельзя. Взаимодействие вариативно, изменчиво, зависит от состояния системы, желания разных людей и их возможностей.

    Поэтому в Истории нет "алгоритма действий". Есть действующее лицо (роль) c его желанием, есть начало пути
    пользователи и конец, но отсутствует "серединка".

    Синонимы: Job story.
  Одна история — две роли: !exclusion |
    Может так получится, что разные роли получат одну и ту же пользу от продукта. При этом разные роли
    подразумевают разную мотивацию и разные контексты, а значит, почти наверняка, пользоваться продуктом они
    будут по-разному.


Функция: !concept


Задание: !concept
  определение: |
    Задание на продукт — это описание, выполненное по стандартному шаблону. Совмещает в себе ТЗ, план работ и отчёт о проделанной работе.
